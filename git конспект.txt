Git Конспект

Сдавать ДЗ через  git:
Создание Git-репозитория
Для начала зарегистрируемся на сайте github .
Затем создайте репозиторий: Стрелочка -> New Repository
Укажите название репозитория и поставьте галочку на «Initialize this repository Readme». 
В качестве названия репозитория укажите название курса, для которого вы собираетесь делать практическое задание.
Установка Git-клиента SmartGit
Клонирование репозитория

Делаем практическое задание к 1-му уроку
Для каждого урока мы будем создавать отдельную ветку (подробнее о ветках смотрите в курсе Git. Быстрый старт ). 
Каждую новую ветку необходимо создавать, находясь в пустой ветке master. Так файлы с разных уроков не будут смешиваться друг с другом.

Создаем pull-request
Перейдите на сайте github на страницу вашего репозитория (в моем случае это
https://github.com/Kartavec/python ). Обновите страницу и перейдите в ветку lesson-1:
Вы должны увидеть файлы практического задания. Теперь нажимаем на кнопку 
New pull request:

я пользуюсь таким не замысловатым алгоритмом: 
1. Создаете репозиторий на ГитХаб
2. Клонируете его на ПК ссылкой HHTP протокола
далее лезем в Git bash и начинаем операцию клона так:
git clone <ссылка на созданный репозиторий>
Главное следите за папкой, в которую клонируете репозиторий 
3. Создаём новую ветку, в которую потом закидываете файлы с домашкой, в bash пишите:
git checkout -b <имя ветки>
4. Делаем собственно домашнее задание, создаём файлы, вносим изменения и прочее - > закидываете все файлы в папку-клон. 
5. Потом добавляете пометку статуса и коммит:
git add (имя файла/файлов, которые забрасываете...это командой добавите метку статуса).
git commit -m "текст коммита" (тут коммит)
6. Теперь привязываем новую ветку к удалённому репозиторию:
git push --set-upstream origin <имя ветки>
7. Переходим на гитхаб или обновляем страницу, и гитхаб сам предложит создать pull request кнопкой "Compare &pull request"


Урок 4. Работа с репозиториями в Git
Создали пустую папку репо, перешли в нее.
git init   # инициализация репо.
git status  # состояние
git remote add origin https: ссылка  # подключение ремоут соединения
git remore -v  # список соединений

Урок 5. Управление файлами репозитория
перешли в папку репо
touch readme.md # создали файл
git status
git add readme.md # добавление
git commit
git commit -m ‘message’
.gitkeep - чтобы сохранять пустые директории
.gitignore - чтобы игнорировать прописанные в нем файлы (.env  temp/* )

Урок 6. История изменений
git log  # просмотр истории коммитов
git log --oneline
просмотр истории
git reset хэш коммита # сброс текущего состояния истории
git reflog # просмотр истории действий
git revert # отмена последствий коммита

Урок 7. Работа с ветками репозитория
git branch # просмотр веток
git branch dev # создание ветки
git checkout dev # переключение
git checkout -b dev-test # создание с переключением
git branch dev-master master # указание точки старта, если ветка создается от другой, не той где мы находимся

Урок 8. Публикация репозитория
ssh-keygen # генерация ключа
git clone git@github.com... project # клонироание
git remote -v - проверка удаленных источников

$ git clone git@github.com:alex-m-kr/python.git hw_python
$ cd hw_python/
$ git status
On branch master
Your branch is up to date with 'origin/master'.
nothing to commit, working tree clean
$ git checkout -b test
Switched to a new branch 'test'
$ touch test.md
$ echo 'test file' > test.md
$ git add test.md
$ git commit -m 'test commit'
$ git push
fatal: The current branch test has no upstream branch.
To push the current branch and set the remote as upstream, use

    git push --set-upstream origin test
git push --set-upstream origin test

ЗАТЕМ ВНЕС ИЗМЕНЕНИЯ НА ГИТХАБ
$ git pull
$ cat test.md
test file
edit git-hub

git fetch - подгрузить обновления из репозитория
git pull - скачать последние обновления ветки
git push - загрузить в репозиторий локальные изменения

Урок 9. Слияние веток
git checkout master
git merge dev - ветка дев вливает изменения в мастер, слияние ветки
git push - загрузка изменений на гитхаб

$ git branch -d te22 - удаление веток из локального репо
$ git push --delete origin test te22 - удаление веток с гитхаб

git add . - добавляет все файлы для коммита

git rebase - смена базовой ветки

git push-- force - принудительно перезаписывает удаленную ветку на текущую

Урок 10. Управление версиями
$ git tag 1.0.0 - создание тега
$ git tag --list
$ git push --tags - загрузка тегов

$ git tag -d 1.0.1 - удаление тега
$ git push --delete origin 1.0.1 - удаление тега с гитхаба

Урок 11. Создание pull-request
Это операция путем запроса на слияние. Предоставить на обзор коллегам, работа с комментариями, выполнение code-review.
Урок 13. Сложные операции





При клонирования репозитория, клонируется только master ветка. Как сделать чтоб кроме ветки master клонировались все остальные?

Нет, клонируются все удалённые ветки. Просто они имеют префикс origin/удалённая_ветка А вот отслеживаемой становится только ветка master -> origin/master.
Для того, чтобы сделать ещё одну отслеживаемую ветку - переключитесь на удалённую и выполните создание локальной ветки. Всё это можно сделать одной командой:
git checkout --track -b local_branch_name origin/remote_branch_name


А зачем это нужно? Сделайте checkout на эту ветку и все. Если хочется посмотреть их список git branch -r
Ну и отвечая на вопрос почему - потому что так устроен git. У вас есть удаленные репозитории и локальный репозиторий. Так вот удаленный репозиторий по умолчанию (orign), ничем не отличается от прочих. Вы можете их свободно добавить и работать с ними (подтягивать от туда ветки, коммиты). А самое главное у каждой ветки и каждого коммита есть несколько состояний, ветка может быть только локальной, может быть синхронизирована с сервером, а может и отставать от сервера, или обгонять его.
/СУПЕР КОММЕНТ К.А.М/



